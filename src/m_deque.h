#ifndef __MY_STL_DEQUE_H
#define __MY_STL_DEQUE_H


#include "m_memory.h"   //for allocator
#include "m_algobase.h"     

namespace my_stl {
    //iterator design
    template<typename _Tp>
    struct __deque_iterator {
        //required by standard
        using iterator_category = random_access_iterator_tag;
        using value_type = _Tp;
        using pointer = _Tp*;
        using reference = _Tp&;
        using difference_type = ptrdiff_t;
        using size_type = size_t;
    };

    //const iterator design
    template<typename _Tp>
    struct __deque_const_iterator {
        //required by standard
        using iterator_category = random_access_iterator_tag;
        using value_type = _Tp;
        using pointer = const _Tp*;
        using reference = const _Tp&;
        using difference_type = ptrdiff_t;
        using size_type = size_t;
    };


    template<typename _Tp, typename Alloc = alloc> 
    class deque {
        public:
            using value_type = _Tp;
            using size_type = size_t;
            using difference_type = ptrdiff_t;
            using pointer = _Tp*;
            using const_pointer = const _Tp*;
            using reference = _Tp&;
            using const_reference = const _Tp&;
            using iterator = __deque_iterator<_Tp>;
            using const_iterator = __deque_const_iterator<_Tp>;
        //public interface
        public:
            //default
            explicit deque();

            //fill
            explicit deque(size_type _n, const value_type& val = value_type());

            //range
            template<typename InputIterator>
            explicit deque(InputIterator first, InputIterator last);

            //copy
            deque(const deque& __other);

            //--------------------------------------------------------------------------
            //------------------------------Assign--------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************



            //--------------------------------------------------------------------------
            //--------------------------Operator Overload-------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************




            //--------------------------------------------------------------------------
            //------------------------element operation---------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************
            


            //--------------------------------------------------------------------------
            //------------------------------emplace--------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************



            //--------------------------------------------------------------------------
            //------------------------------insert--------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************
            

            //--------------------------------------------------------------------------
            //------------------------------erase--------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************



            //--------------------------------------------------------------------------
            //-------------------------------pop----------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************


            //--------------------------------------------------------------------------
            //------------------------------push--------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************



            //--------------------------------------------------------------------------
            //------------------------------Resize--------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************


            
            //--------------------------------------------------------------------------
            //------------------------------Shrink--------------------------------------
            //--------------------------------------------------------------------------
            
            //**************************************************************************

    };
}

#endif
